#
# Baseline CI Validation Workflow
#
# Validates the baseline repository itself on every push and pull request.
# This is NOT the same as nixline-ci.yml which is for consumer repositories.
#
# Baseline repos are the SOURCE of policy packs and should validate:
# - Flake integrity and buildability
# - App functionality (dry-run mode only)
# - Pack definitions are valid
#
# Consumer repos use nixline-ci.yml to materialize and validate files FROM baseline.
# Baseline repos use this workflow to validate the source itself.
# On successful validation of main branch pushes, automatically updates
# .stable-candidate and triggers stable tag promotion.
#
# Triggered by: push, pull_request
# Purpose: Validate baseline repository source integrity and manage stable promotion
#

name: Baseline CI

on: [push, pull_request]

permissions:
  contents: write
  actions: write
  pull-requests: write

jobs:
  validate-baseline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Validate flake integrity
        run: nix flake check

      - name: Test baseline apps (dry-run only)
        run: |
          # Test sync app with dry-run (no file materialization in baseline itself)
          nix run .#sync -- --dry-run

          # Test other core apps
          nix run .#list-licenses
          nix run .#create-pack -- --list-examples

          # Test import-policy app (basic validation only)
          echo "# Test content" > test-file.md
          nix run .#import-policy -- --help > /dev/null
          rm test-file.md

      - name: Validate pack definitions
        run: |
          # Ensure all pack files are valid nix expressions
          for pack in packs/*.nix; do
            if [ -f "$pack" ]; then
              echo "Validating $pack"
              nix eval --file "$pack" --json > /dev/null
            fi
          done

  promote-to-stable:
    runs-on: ubuntu-latest
    needs: validate-baseline
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'Mark ') && !contains(github.event.head_commit.message, 'stable candidate')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Update stable candidate via PR
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Update .stable-candidate with current commit hash
          echo "${{ github.sha }}" > .stable-candidate

          # Check if there are any changes to commit
          if git diff --quiet .stable-candidate; then
            echo "No changes to .stable-candidate file"
            exit 0
          fi

          # Create branch for stable candidate update (using automation/ prefix to avoid feature branch rules)
          BRANCH_NAME="automation/stable-candidate-$(date +%s)"
          git checkout -b "$BRANCH_NAME"

          # Commit the update
          git add .stable-candidate
          git commit -m "Mark ${{ github.sha }} as stable candidate"

          # Push branch
          git push origin "$BRANCH_NAME"

          # Create PR for the stable candidate update
          gh pr create \
            --title "Update stable candidate to ${{ github.sha }}" \
            --body "Automated update of .stable-candidate file to track commit ${{ github.sha }} for stable promotion.

          **Commit:** ${{ github.sha }}
          **Triggered by:** Baseline CI validation

          This PR will be automatically merged after validation passes." \
            --base main \
            --head "$BRANCH_NAME"

          # Auto-merge the PR with admin override
          PR_NUMBER=$(gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number')
          gh pr merge "$PR_NUMBER" --admin --squash

          echo "Successfully updated stable candidate via PR"

      - name: Trigger stable promotion
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'promote-to-stable.yml',
              ref: 'main',
              inputs: {
                commit_hash: '${{ github.sha }}',
                promotion_target: 'stable',
                automation_trigger: 'true'
              }
            });

            console.log('Triggered stable promotion for commit ${{ github.sha }}');