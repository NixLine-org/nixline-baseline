{ pkgs, lib, config ? {} }:

# Go Formatting and Linting Configuration
# This pack provides Go formatting and basic linting setup
#
# Configuration reference:
# - gofmt documentation: https://golang.org/cmd/gofmt/
# - goimports documentation: https://pkg.go.dev/golang.org/x/tools/cmd/goimports
# - Go code review comments: https://github.com/golang/go/wiki/CodeReviewComments
# - Effective Go: https://golang.org/doc/effective_go

let
  packConfig = config.packs."go/gofmt" or {};

  # Go formatting options
  useGoimports = packConfig.use_goimports or true;
  tabWidth = packConfig.tab_width or 8;
  formatOnSave = packConfig.format_on_save or true;

in {
  files = {
    ".gofmt" = ''
      # Go formatting configuration for ${config.organization.name or "your organization"}
      # Generated by NixLine - edit via .nixline.toml [packs."go/gofmt"] section

      # This file indicates that this project uses gofmt for formatting
      # Formatting options:
      # - Use goimports: ${if useGoimports then "yes" else "no"}
      # - Tab width: ${toString tabWidth}
      # - Format on save: ${if formatOnSave then "yes" else "no"}
    '';

    "Makefile.go-format" = ''
      # Go formatting and linting targets
      # Include this in your main Makefile or run targets directly

      .PHONY: fmt fmt-check lint vet

      # Format Go code
      fmt:
      ${if useGoimports then ''
	      @echo "Running goimports..."
	      @goimports -w .
      '' else ''
	      @echo "Running gofmt..."
	      @gofmt -w .
      ''}

      # Check if code is formatted
      fmt-check:
      ${if useGoimports then ''
	      @echo "Checking goimports formatting..."
	      @test -z "$$(goimports -l . | tee /dev/stderr)"
      '' else ''
	      @echo "Checking gofmt formatting..."
	      @test -z "$$(gofmt -l . | tee /dev/stderr)"
      ''}

      # Run go vet
      vet:
	      @echo "Running go vet..."
	      @go vet ./...

      # Run basic linting (requires golint)
      lint:
	      @echo "Running golint..."
	      @if command -v golint >/dev/null 2>&1; then \
	        golint ./...; \
	      else \
	        echo "golint not found. Install with: go install golang.org/x/lint/golint@latest"; \
	      fi

      # Run all checks
      check: fmt-check vet lint
	      @echo "All Go checks passed!"
    '';

    "docs/go-formatting.md" = ''
      # Go Code Formatting and Linting

      This project follows standard Go formatting and linting practices.

      ## Tools Used

      - **${if useGoimports then "goimports" else "gofmt"}**: Code formatting
      - **go vet**: Static analysis
      - **golint**: Style linting (optional)

      ## Usage

      ### Formatting
      ```bash
      # Format all Go code
      make fmt

      # Check formatting without changes
      make fmt-check

      # Or use Go tools directly:
      ${if useGoimports then "goimports -w ." else "gofmt -w ."}
      ```

      ### Linting
      ```bash
      # Run static analysis
      make vet

      # Run style linting
      make lint

      # Run all checks
      make check
      ```

      ## Editor Integration

      ### VS Code
      Install the Go extension and add to settings.json:
      ```json
      {
        "go.formatTool": "${if useGoimports then "goimports" else "gofmt"}",
        "go.formatOnSave": ${if formatOnSave then "true" else "false"},
        "go.lintTool": "golint",
        "go.vetOnSave": "package"
      }
      ```

      ### Vim/Neovim with vim-go
      ```vim
      let g:go_fmt_command = "${if useGoimports then "goimports" else "gofmt"}"
      let g:go_fmt_autosave = ${if formatOnSave then "1" else "0"}
      ```

      ## CI Integration

      Add this to your GitHub Actions workflow:

      ```yaml
      - name: Format and lint Go code
        run: |
          make fmt-check
          make vet
          make lint
      ```

      ## Dependencies

      Install required tools:
      ```bash
      # goimports (if using)
      go install golang.org/x/tools/cmd/goimports@latest

      # golint (optional)
      go install golang.org/x/lint/golint@latest
      ```

      ## Configuration

      Customize formatting in `.nixline.toml`:

      ```toml
      [packs."go/gofmt"]
      use_goimports = true
      tab_width = 8
      format_on_save = true
      ```
    '';

    ".golangci.yml" = ''
      # golangci-lint configuration
      # More advanced linting configuration

      run:
        timeout: 5m
        issues-exit-code: 1
        tests: true

      output:
        format: colored-line-number
        print-issued-lines: true
        print-linter-name: true

      linters-settings:
        gofmt:
          simplify: true
        goimports:
          local-prefixes: github.com/${config.organization.name or "your-org"}
        golint:
          min-confidence: 0.8
        govet:
          check-shadowing: true
        misspell:
          locale: US

      linters:
        enable:
          - gofmt
          - goimports
          - golint
          - govet
          - ineffassign
          - misspell
          - deadcode
          - varcheck
          - structcheck

      issues:
        exclude-use-default: false
        max-issues-per-linter: 0
        max-same-issues: 0
    '';
  };

  # Validation checks
  checks = [
    "if command -v go >/dev/null 2>&1; then go version; else echo 'Warning: go not found, skipping Go checks'; fi"
    "${if useGoimports then
        "if command -v goimports >/dev/null 2>&1; then echo 'goimports available'; else echo 'Warning: goimports not found, install with: go install golang.org/x/tools/cmd/goimports@latest'; fi"
      else
        "if command -v gofmt >/dev/null 2>&1; then echo 'gofmt available'; else echo 'Warning: gofmt not found'; fi"
     }"
  ];

  meta = {
    description = "Go formatting and basic linting configuration";
    languages = ["go"];
    files_generated = [".gofmt" "Makefile.go-format" "docs/go-formatting.md" ".golangci.yml"];
  };
}