{ pkgs, lib, config ? {} }:

# Go golangci-lint Configuration
# This pack provides comprehensive Go linting with golangci-lint

let
  # Default golangci-lint configuration
  defaultConfig = {
    timeout = "5m";
    issues_exit_code = 1;
    tests = true;

    # Enabled linters
    linters = [
      "errcheck"       # Check for unchecked errors
      "gosimple"       # Simplify Go code
      "govet"          # Standard Go vet
      "ineffassign"    # Detect ineffectual assignments
      "staticcheck"    # Advanced static analysis
      "typecheck"      # Type checking
      "unused"         # Find unused code
      "gofmt"          # Check formatting
      "goimports"      # Check imports
      "misspell"       # Find misspellings
      "revive"         # Fast, configurable, extensible, flexible, and beautiful linter
    ];

    # Additional linters that can be enabled
    optional_linters = [
      "cyclop"         # Cyclomatic complexity
      "dupl"           # Code clone detection
      "funlen"         # Function length
      "gocognit"       # Cognitive complexity
      "goconst"        # Repeated strings that could be constants
      "gocyclo"        # Cyclomatic complexity
      "godot"          # Check if comments end with a period
      "godox"          # Detect TODO/FIXME/etc comments
      "gomnd"          # Magic number detection
      "gosec"          # Security audit
      "nestif"         # Nested if statements
      "prealloc"       # Performance: slice preallocation
      "unconvert"      # Unnecessary type conversions
      "whitespace"     # Whitespace issues
    ];

    # Linter settings
    settings = {
      goimports = {
        local_prefixes = "github.com/${config.organization.name or "your-org"}";
      };
      revive = {
        min_confidence = 0.8;
      };
      cyclop = {
        max_complexity = 15;
      };
      funlen = {
        lines = 100;
        statements = 50;
      };
    };
  };

  # Merge with user configuration
  packConfig = config.packs."go/golangci-lint" or {};
  finalConfig = lib.recursiveUpdate defaultConfig packConfig;

  # Format YAML configuration
  formatYamlList = items:
    lib.concatMapStringsSep "\n" (item: "  - ${item}") items;

in {
  files = {
    ".golangci.yml" = ''
      # golangci-lint configuration for ${config.organization.name or "your organization"}
      # Generated by NixLine - edit via .nixline.toml [packs."go/golangci-lint"] section

      run:
        timeout: ${finalConfig.timeout}
        issues-exit-code: ${toString finalConfig.issues_exit_code}
        tests: ${if finalConfig.tests then "true" else "false"}
        skip-dirs:
          - vendor
          - third_party
        skip-files:
          - ".*\\.pb\\.go$"
          - ".*_mock\\.go$"

      output:
        format: colored-line-number
        print-issued-lines: true
        print-linter-name: true
        sort-results: true

      linters:
        enable:
      ${formatYamlList finalConfig.linters}
        disable-all: false
        fast: false

      linters-settings:
        goimports:
          local-prefixes: ${finalConfig.settings.goimports.local_prefixes}

        revive:
          min-confidence: ${toString finalConfig.settings.revive.min_confidence}
          rules:
            - name: exported
              arguments: ["checkPrivateReceivers", "sayRepetitiveInsteadOfStutters"]

        cyclop:
          max-complexity: ${toString finalConfig.settings.cyclop.max_complexity}

        funlen:
          lines: ${toString finalConfig.settings.funlen.lines}
          statements: ${toString finalConfig.settings.funlen.statements}

        govet:
          check-shadowing: true
          settings:
            printf:
              funcs:
                - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
                - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
                - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
                - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

        misspell:
          locale: US
          ignore-words:
            - someword

        gocyclo:
          min-complexity: 15

      issues:
        exclude-use-default: false
        exclude-case-sensitive: false
        include:
          - EXC0002 # disable excluding of issues about comments from golint
        max-issues-per-linter: 0
        max-same-issues: 0
        new: false
        fix: false

      severity:
        default-severity: error
        case-sensitive: false
        rules:
          - linters:
              - revive
            severity: warning
    '';

    "Makefile.golangci" = ''
      # golangci-lint targets for Makefile

      .PHONY: lint lint-fix

      # Run golangci-lint
      lint:
	      @echo "Running golangci-lint..."
	      @golangci-lint run

      # Run golangci-lint with auto-fix
      lint-fix:
	      @echo "Running golangci-lint with auto-fix..."
	      @golangci-lint run --fix

      # Install golangci-lint
      install-linter:
	      @echo "Installing golangci-lint..."
	      @curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin v1.54.2
    '';

    "docs/go-linting.md" = ''
      # Go Linting with golangci-lint

      This project uses golangci-lint for comprehensive Go code linting.

      ## Installation

      ```bash
      # Install golangci-lint
      curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

      # Or use the Makefile target
      make install-linter
      ```

      ## Usage

      ```bash
      # Run all linters
      golangci-lint run

      # Run with auto-fix
      golangci-lint run --fix

      # Run specific linters
      golangci-lint run --enable-only=errcheck,govet

      # Or use Makefile targets
      make lint
      make lint-fix
      ```

      ## Enabled Linters

      Current configuration includes:
      ${lib.concatMapStringsSep "\n" (linter: "- **${linter}**") finalConfig.linters}

      ## Configuration

      The linting configuration is generated from your `.nixline.toml` file.
      To customize linting rules, modify the `[packs."go/golangci-lint"]` section:

      ```toml
      [packs."go/golangci-lint"]
      timeout = "10m"
      linters = ["errcheck", "govet", "staticcheck", "gosec"]

      [packs."go/golangci-lint".settings.cyclop]
      max_complexity = 20
      ```

      ## CI Integration

      Add this to your GitHub Actions workflow:

      ```yaml
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54.2
          args: --timeout=5m
      ```

      Or run manually:

      ```yaml
      - name: Run golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          golangci-lint run
      ```

      ## Editor Integration

      ### VS Code
      Install the "Go" extension and golangci-lint will be automatically used.

      ### Vim/Neovim
      With vim-go or ale:
      ```vim
      let g:go_metalinter_command = "golangci-lint"
      let g:go_metalinter_enabled = ['golangci-lint']
      ```

      ## Troubleshooting

      ### Common Issues

      1. **Timeout errors**: Increase timeout in configuration
      2. **Memory issues**: Use `--fast` flag or reduce enabled linters
      3. **False positives**: Add exclusions in `.golangci.yml`

      ### Ignoring Issues

      ```go
      //nolint:linter-name // Reason for ignoring
      func problematicFunction() {
          // code
      }
      ```
    '';
  };

  # Validation checks
  checks = [
    "if command -v go >/dev/null 2>&1; then go version; else echo 'Warning: go not found, skipping Go checks'; fi"
    "if command -v golangci-lint >/dev/null 2>&1; then golangci-lint version; else echo 'Warning: golangci-lint not found, install from https://golangci-lint.run/usage/install/'; fi"
  ];

  meta = {
    description = "Go comprehensive linting with golangci-lint";
    languages = ["go"];
    files_generated = [".golangci.yml" "Makefile.golangci" "docs/go-linting.md"];
  };
}