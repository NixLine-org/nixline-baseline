{ pkgs, lib, config ? {} }:

# Rust Clippy Linting Configuration
# This pack provides clippy configuration for Rust projects
#
# Configuration reference:
# - Official Clippy documentation: https://doc.rust-lang.org/clippy/configuration.html
# - Clippy lint list: https://rust-lang.github.io/rust-clippy/master/
# - clippy.toml format: https://doc.rust-lang.org/clippy/configuration.html#configuration-file

let
  # Default clippy configuration
  defaultClippyConfig = {
    # Common Clippy lints to enable/disable
    allow = [
      "clippy::module_name_repetitions"  # Allow module name repetitions
    ];
    warn = [
      "clippy::all"                     # Enable all clippy warnings
      "clippy::pedantic"                # Enable pedantic lints
    ];
    deny = [
      "clippy::unwrap_used"             # Deny unwrap() usage
      "clippy::expect_used"             # Deny expect() usage in production
    ];
  };

  # Merge with user configuration
  packConfig = config.packs."rust/clippy" or {};
  finalConfig = lib.recursiveUpdate defaultClippyConfig packConfig;

in {
  files = {
    "clippy.toml" = ''
      # Clippy configuration for ${config.organization.name or "your organization"}
      # Generated by NixLine - edit via .nixline.toml [packs."rust/clippy"] section

      # Disallowed methods
      disallowed-methods = [
        "std::env::set_var",
        "std::process::exit",
      ]

      # Complexity thresholds
      cognitive-complexity-threshold = 25
      type-complexity-threshold = 60
      too-many-arguments-threshold = 7

      # Import restrictions
      avoid-breaking-exported-api = true
      check-private-items = true
    '';

    ".clippy.toml" = ''
      # Clippy configuration for ${config.organization.name or "your organization"}
      # Generated by NixLine

      # Allow certain lints that may be too restrictive
      ${lib.concatMapStringsSep "\n" (lint: ''allow = ["${lint}"]'') finalConfig.allow}

      # Warning level lints
      ${lib.concatMapStringsSep "\n" (lint: ''warn = ["${lint}"]'') finalConfig.warn}

      # Denied lints (errors)
      ${lib.concatMapStringsSep "\n" (lint: ''deny = ["${lint}"]'') finalConfig.deny}
    '';

    # Cargo.toml snippet for clippy in workspace
    "docs/rust-clippy-setup.md" = ''
      # Rust Clippy Setup

      This project includes Clippy configuration for consistent Rust code quality.

      ## Running Clippy

      ```bash
      # Run clippy on all targets
      cargo clippy --all-targets --all-features

      # Run clippy and treat warnings as errors
      cargo clippy --all-targets --all-features -- -D warnings

      # Run clippy with pedantic lints
      cargo clippy --all-targets --all-features -- -W clippy::pedantic
      ```

      ## Configuration

      The clippy configuration is generated from your `.nixline.toml` configuration.
      To customize clippy rules, modify the `[packs."rust/clippy"]` section:

      ```toml
      [packs."rust/clippy"]
      allow = ["clippy::module_name_repetitions"]
      warn = ["clippy::all", "clippy::pedantic"]
      deny = ["clippy::unwrap_used"]
      ```

      ## CI Integration

      Add this to your GitHub Actions workflow:

      ```yaml
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      ```
    '';
  };

  # Validation checks
  checks = [
    "if command -v cargo >/dev/null 2>&1; then cargo --version; else echo 'Warning: cargo not found, skipping Rust checks'; fi"
  ];

  meta = {
    description = "Rust Clippy linting configuration";
    languages = ["rust"];
    files_generated = ["clippy.toml" ".clippy.toml" "docs/rust-clippy-setup.md"];
  };
}