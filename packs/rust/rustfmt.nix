{ pkgs, lib, config ? {} }:

# Rust rustfmt Configuration
# This pack provides rustfmt configuration for consistent Rust code formatting
#
# Configuration reference:
# - Official rustfmt documentation: https://rust-lang.github.io/rustfmt/
# - Configuration options: https://rust-lang.github.io/rustfmt/?version=v1.6.0&search=#configuration-options
# - rustfmt.toml format: https://github.com/rust-lang/rustfmt/blob/master/Configurations.md

let
  # Default rustfmt configuration
  defaultRustfmtConfig = {
    edition = "2021";
    max_width = 100;
    hard_tabs = false;
    tab_spaces = 4;
    newline_style = "Unix";
    use_small_heuristics = "Default";
    reorder_imports = true;
    reorder_modules = true;
    remove_nested_parens = true;
    merge_derives = true;
    use_try_shorthand = false;
    use_field_init_shorthand = false;
    force_explicit_abi = true;
    normalize_comments = false;
    normalize_doc_attributes = false;
    format_code_in_doc_comments = false;
    wrap_comments = false;
    comment_width = 80;
    imports_layout = "Mixed";
    imports_granularity = "Preserve";
    group_imports = "StdExternalCrate";
  };

  # Merge with user configuration
  packConfig = config.packs."rust/rustfmt" or {};
  finalConfig = lib.recursiveUpdate defaultRustfmtConfig packConfig;

  # Format TOML configuration
  formatTomlValue = value:
    if builtins.isBool value then
      if value then "true" else "false"
    else if builtins.isString value then
      ''"${value}"''
    else
      toString value;

  formatTomlSection = attrs:
    lib.concatStringsSep "\n" (
      lib.mapAttrsToList (name: value: "${name} = ${formatTomlValue value}") attrs
    );

in {
  files = {
    "rustfmt.toml" = ''
      # rustfmt configuration for ${config.organization.name or "your organization"}
      # Generated by NixLine - edit via .nixline.toml [packs."rust/rustfmt"] section

      ${formatTomlSection finalConfig}
    '';

    # Alternative location that rustfmt also checks
    ".rustfmt.toml" = ''
      # rustfmt configuration for ${config.organization.name or "your organization"}
      # Generated by NixLine

      ${formatTomlSection finalConfig}
    '';

    "docs/rust-formatting.md" = ''
      # Rust Code Formatting

      This project uses rustfmt for consistent Rust code formatting.

      ## Configuration

      The rustfmt configuration is generated from your `.nixline.toml` file.
      Current settings:
      - Max width: ${toString finalConfig.max_width}
      - Tab spaces: ${toString finalConfig.tab_spaces}
      - Edition: ${finalConfig.edition}

      ## Usage

      ```bash
      # Format all Rust code in the project
      cargo fmt

      # Check formatting without making changes
      cargo fmt -- --check

      # Format specific file
      rustfmt src/main.rs
      ```

      ## Editor Integration

      ### VS Code
      Install the "rust-analyzer" extension and add to settings.json:
      ```json
      {
        "rust-analyzer.rustfmt.extraArgs": ["--config-path", "./rustfmt.toml"]
      }
      ```

      ### Vim/Neovim
      ```vim
      let g:rustfmt_options = '--config-path ./rustfmt.toml'
      ```

      ## CI Integration

      Add this to your GitHub Actions workflow:

      ```yaml
      - name: Check Rust formatting
        run: cargo fmt -- --check
      ```

      ## Customization

      To customize formatting rules, modify the `[packs."rust/rustfmt"]` section in `.nixline.toml`:

      ```toml
      [packs."rust/rustfmt"]
      max_width = 120
      hard_tabs = false
      tab_spaces = 2
      reorder_imports = true
      ```
    '';
  };

  # Validation checks
  checks = [
    "if command -v cargo >/dev/null 2>&1; then cargo --version; else echo 'Warning: cargo not found, skipping Rust checks'; fi"
    "if command -v rustfmt >/dev/null 2>&1; then rustfmt --version; else echo 'Warning: rustfmt not found'; fi"
  ];

  meta = {
    description = "Rust rustfmt formatting configuration";
    languages = ["rust"];
    files_generated = ["rustfmt.toml" ".rustfmt.toml" "docs/rust-formatting.md"];
  };
}